/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Indexes;
import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.UserNotificationRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserNotification extends TableImpl<UserNotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_notification</code>
     */
    public static final UserNotification USER_NOTIFICATION = new UserNotification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserNotificationRecord> getRecordType() {
        return UserNotificationRecord.class;
    }

    /**
     * The column <code>public.user_notification.id</code>.
     */
    public final TableField<UserNotificationRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.user_notification.user_id</code>.
     */
    public final TableField<UserNotificationRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.user_notification.notification_id</code>.
     */
    public final TableField<UserNotificationRecord, String> NOTIFICATION_ID = createField(DSL.name("notification_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.user_notification.status</code>.
     */
    public final TableField<UserNotificationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.field(DSL.raw("'UNREAD'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.user_notification.active</code>.
     */
    public final TableField<UserNotificationRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.user_notification.created_at</code>.
     */
    public final TableField<UserNotificationRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.INSTANT)), this, "");

    /**
     * The column <code>public.user_notification.modified_at</code>.
     */
    public final TableField<UserNotificationRecord, Instant> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.INSTANT)), this, "");

    private UserNotification(Name alias, Table<UserNotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserNotification(Name alias, Table<UserNotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_notification</code> table reference
     */
    public UserNotification(String alias) {
        this(DSL.name(alias), USER_NOTIFICATION);
    }

    /**
     * Create an aliased <code>public.user_notification</code> table reference
     */
    public UserNotification(Name alias) {
        this(alias, USER_NOTIFICATION);
    }

    /**
     * Create a <code>public.user_notification</code> table reference
     */
    public UserNotification() {
        this(DSL.name("user_notification"), null);
    }

    public <O extends Record> UserNotification(Table<O> child, ForeignKey<O, UserNotificationRecord> key) {
        super(child, key, USER_NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USER_NOTIFICATION_NOTIFICATION, Indexes.IDX_USER_NOTIFICATION_USER_STATUS);
    }

    @Override
    public UniqueKey<UserNotificationRecord> getPrimaryKey() {
        return Keys.USER_NOTIFICATION_PKEY;
    }

    @Override
    public List<UniqueKey<UserNotificationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_USER_NOTIFICATION);
    }

    @Override
    public List<ForeignKey<UserNotificationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_NOTIFICATION__FK_USER_NOTIFICATION_USER, Keys.USER_NOTIFICATION__FK_USER_NOTIFICATION_NOTIFICATION);
    }

    private transient User _user;
    private transient Notification _notification;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.USER_NOTIFICATION__FK_USER_NOTIFICATION_USER);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>public.notification</code> table.
     */
    public Notification notification() {
        if (_notification == null)
            _notification = new Notification(this, Keys.USER_NOTIFICATION__FK_USER_NOTIFICATION_NOTIFICATION);

        return _notification;
    }

    @Override
    public UserNotification as(String alias) {
        return new UserNotification(DSL.name(alias), this);
    }

    @Override
    public UserNotification as(Name alias) {
        return new UserNotification(alias, this);
    }

    @Override
    public UserNotification as(Table<?> alias) {
        return new UserNotification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNotification rename(String name) {
        return new UserNotification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNotification rename(Name name) {
        return new UserNotification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNotification rename(Table<?> name) {
        return new UserNotification(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Boolean, Instant, Instant> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
