/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.JobQueueRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JobQueue extends TableImpl<JobQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.job_queue</code>
     */
    public static final JobQueue JOB_QUEUE = new JobQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobQueueRecord> getRecordType() {
        return JobQueueRecord.class;
    }

    /**
     * The column <code>public.job_queue.id</code>.
     */
    public final TableField<JobQueueRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.job_queue.broadcast_flag</code>.
     */
    public final TableField<JobQueueRecord, Boolean> BROADCAST_FLAG = createField(DSL.name("broadcast_flag"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.job_queue.channel</code>.
     */
    public final TableField<JobQueueRecord, String> CHANNEL = createField(DSL.name("channel"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.job_queue.payload</code>.
     */
    public final TableField<JobQueueRecord, JSONB> PAYLOAD = createField(DSL.name("payload"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.job_queue.priority</code>.
     */
    public final TableField<JobQueueRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.job_queue.status</code>.
     */
    public final TableField<JobQueueRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.job_queue.error</code>.
     */
    public final TableField<JobQueueRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.job_queue.created_at</code>.
     */
    public final TableField<JobQueueRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.job_queue.processed_at</code>.
     */
    public final TableField<JobQueueRecord, Instant> PROCESSED_AT = createField(DSL.name("processed_at"), SQLDataType.INSTANT, this, "");

    private JobQueue(Name alias, Table<JobQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobQueue(Name alias, Table<JobQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.job_queue</code> table reference
     */
    public JobQueue(String alias) {
        this(DSL.name(alias), JOB_QUEUE);
    }

    /**
     * Create an aliased <code>public.job_queue</code> table reference
     */
    public JobQueue(Name alias) {
        this(alias, JOB_QUEUE);
    }

    /**
     * Create a <code>public.job_queue</code> table reference
     */
    public JobQueue() {
        this(DSL.name("job_queue"), null);
    }

    public <O extends Record> JobQueue(Table<O> child, ForeignKey<O, JobQueueRecord> key) {
        super(child, key, JOB_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<JobQueueRecord> getPrimaryKey() {
        return Keys.JOB_QUEUE_PKEY;
    }

    @Override
    public JobQueue as(String alias) {
        return new JobQueue(DSL.name(alias), this);
    }

    @Override
    public JobQueue as(Name alias) {
        return new JobQueue(alias, this);
    }

    @Override
    public JobQueue as(Table<?> alias) {
        return new JobQueue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobQueue rename(String name) {
        return new JobQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobQueue rename(Name name) {
        return new JobQueue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobQueue rename(Table<?> name) {
        return new JobQueue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, Boolean, String, JSONB, Integer, String, String, Instant, Instant> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super Boolean, ? super String, ? super JSONB, ? super Integer, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super Boolean, ? super String, ? super JSONB, ? super Integer, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
