/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.Oauth2AuthorizationConsentRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Oauth2AuthorizationConsent extends TableImpl<Oauth2AuthorizationConsentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.oauth2_authorization_consent</code>
     */
    public static final Oauth2AuthorizationConsent OAUTH2_AUTHORIZATION_CONSENT = new Oauth2AuthorizationConsent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Oauth2AuthorizationConsentRecord> getRecordType() {
        return Oauth2AuthorizationConsentRecord.class;
    }

    /**
     * The column
     * <code>public.oauth2_authorization_consent.registered_client_id</code>.
     */
    public final TableField<Oauth2AuthorizationConsentRecord, String> REGISTERED_CLIENT_ID = createField(DSL.name("registered_client_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization_consent.principal_name</code>.
     */
    public final TableField<Oauth2AuthorizationConsentRecord, String> PRINCIPAL_NAME = createField(DSL.name("principal_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.oauth2_authorization_consent.authorities</code>.
     */
    public final TableField<Oauth2AuthorizationConsentRecord, String> AUTHORITIES = createField(DSL.name("authorities"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    private Oauth2AuthorizationConsent(Name alias, Table<Oauth2AuthorizationConsentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Oauth2AuthorizationConsent(Name alias, Table<Oauth2AuthorizationConsentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.oauth2_authorization_consent</code> table
     * reference
     */
    public Oauth2AuthorizationConsent(String alias) {
        this(DSL.name(alias), OAUTH2_AUTHORIZATION_CONSENT);
    }

    /**
     * Create an aliased <code>public.oauth2_authorization_consent</code> table
     * reference
     */
    public Oauth2AuthorizationConsent(Name alias) {
        this(alias, OAUTH2_AUTHORIZATION_CONSENT);
    }

    /**
     * Create a <code>public.oauth2_authorization_consent</code> table reference
     */
    public Oauth2AuthorizationConsent() {
        this(DSL.name("oauth2_authorization_consent"), null);
    }

    public <O extends Record> Oauth2AuthorizationConsent(Table<O> child, ForeignKey<O, Oauth2AuthorizationConsentRecord> key) {
        super(child, key, OAUTH2_AUTHORIZATION_CONSENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Oauth2AuthorizationConsentRecord> getPrimaryKey() {
        return Keys.OAUTH2_AUTHORIZATION_CONSENT_PKEY;
    }

    @Override
    public Oauth2AuthorizationConsent as(String alias) {
        return new Oauth2AuthorizationConsent(DSL.name(alias), this);
    }

    @Override
    public Oauth2AuthorizationConsent as(Name alias) {
        return new Oauth2AuthorizationConsent(alias, this);
    }

    @Override
    public Oauth2AuthorizationConsent as(Table<?> alias) {
        return new Oauth2AuthorizationConsent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2AuthorizationConsent rename(String name) {
        return new Oauth2AuthorizationConsent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2AuthorizationConsent rename(Name name) {
        return new Oauth2AuthorizationConsent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2AuthorizationConsent rename(Table<?> name) {
        return new Oauth2AuthorizationConsent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
