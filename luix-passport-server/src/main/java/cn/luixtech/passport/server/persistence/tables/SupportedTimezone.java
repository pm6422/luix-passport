/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.SupportedTimezoneRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SupportedTimezone extends TableImpl<SupportedTimezoneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.supported_timezone</code>
     */
    public static final SupportedTimezone SUPPORTED_TIMEZONE = new SupportedTimezone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupportedTimezoneRecord> getRecordType() {
        return SupportedTimezoneRecord.class;
    }

    /**
     * The column <code>public.supported_timezone.id</code>.
     */
    public final TableField<SupportedTimezoneRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.supported_timezone.utc_offset</code>.
     */
    public final TableField<SupportedTimezoneRecord, String> UTC_OFFSET = createField(DSL.name("utc_offset"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.supported_timezone.preset</code>.
     */
    public final TableField<SupportedTimezoneRecord, Boolean> PRESET = createField(DSL.name("preset"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private SupportedTimezone(Name alias, Table<SupportedTimezoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private SupportedTimezone(Name alias, Table<SupportedTimezoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.supported_timezone</code> table reference
     */
    public SupportedTimezone(String alias) {
        this(DSL.name(alias), SUPPORTED_TIMEZONE);
    }

    /**
     * Create an aliased <code>public.supported_timezone</code> table reference
     */
    public SupportedTimezone(Name alias) {
        this(alias, SUPPORTED_TIMEZONE);
    }

    /**
     * Create a <code>public.supported_timezone</code> table reference
     */
    public SupportedTimezone() {
        this(DSL.name("supported_timezone"), null);
    }

    public <O extends Record> SupportedTimezone(Table<O> child, ForeignKey<O, SupportedTimezoneRecord> key) {
        super(child, key, SUPPORTED_TIMEZONE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SupportedTimezoneRecord> getPrimaryKey() {
        return Keys.SUPPORTED_TIMEZONE_PKEY;
    }

    @Override
    public SupportedTimezone as(String alias) {
        return new SupportedTimezone(DSL.name(alias), this);
    }

    @Override
    public SupportedTimezone as(Name alias) {
        return new SupportedTimezone(alias, this);
    }

    @Override
    public SupportedTimezone as(Table<?> alias) {
        return new SupportedTimezone(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SupportedTimezone rename(String name) {
        return new SupportedTimezone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SupportedTimezone rename(Name name) {
        return new SupportedTimezone(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SupportedTimezone rename(Table<?> name) {
        return new SupportedTimezone(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
