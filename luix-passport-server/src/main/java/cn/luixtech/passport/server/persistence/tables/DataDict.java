/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.DataDictRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DataDict extends TableImpl<DataDictRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_dict</code>
     */
    public static final DataDict DATA_DICT = new DataDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataDictRecord> getRecordType() {
        return DataDictRecord.class;
    }

    /**
     * The column <code>public.data_dict.id</code>.
     */
    public final TableField<DataDictRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.data_dict.num</code>.
     */
    public final TableField<DataDictRecord, String> NUM = createField(DSL.name("num"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.data_dict.category_code</code>.
     */
    public final TableField<DataDictRecord, String> CATEGORY_CODE = createField(DSL.name("category_code"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.data_dict.dict_code</code>.
     */
    public final TableField<DataDictRecord, String> DICT_CODE = createField(DSL.name("dict_code"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.data_dict.dict_name</code>.
     */
    public final TableField<DataDictRecord, String> DICT_NAME = createField(DSL.name("dict_name"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.data_dict.remark</code>.
     */
    public final TableField<DataDictRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.data_dict.enabled</code>.
     */
    public final TableField<DataDictRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.data_dict.created_by</code>.
     */
    public final TableField<DataDictRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.data_dict.created_at</code>.
     */
    public final TableField<DataDictRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_dict.modified_by</code>.
     */
    public final TableField<DataDictRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.data_dict.modified_at</code>.
     */
    public final TableField<DataDictRecord, LocalDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private DataDict(Name alias, Table<DataDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataDict(Name alias, Table<DataDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.data_dict</code> table reference
     */
    public DataDict(String alias) {
        this(DSL.name(alias), DATA_DICT);
    }

    /**
     * Create an aliased <code>public.data_dict</code> table reference
     */
    public DataDict(Name alias) {
        this(alias, DATA_DICT);
    }

    /**
     * Create a <code>public.data_dict</code> table reference
     */
    public DataDict() {
        this(DSL.name("data_dict"), null);
    }

    public <O extends Record> DataDict(Table<O> child, ForeignKey<O, DataDictRecord> key) {
        super(child, key, DATA_DICT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DataDictRecord> getPrimaryKey() {
        return Keys.DATA_DICT_PKEY;
    }

    @Override
    public List<UniqueKey<DataDictRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_DATA_DICT_CATE_CODE_DICT_CODE);
    }

    @Override
    public DataDict as(String alias) {
        return new DataDict(DSL.name(alias), this);
    }

    @Override
    public DataDict as(Name alias) {
        return new DataDict(alias, this);
    }

    @Override
    public DataDict as(Table<?> alias) {
        return new DataDict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataDict rename(String name) {
        return new DataDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataDict rename(Name name) {
        return new DataDict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataDict rename(Table<?> name) {
        return new DataDict(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
