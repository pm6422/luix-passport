/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.records;


import cn.luixtech.passport.server.persistence.tables.UserPermission;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserPermissionRecord extends UpdatableRecordImpl<UserPermissionRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_permission.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_permission.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.user_permission.user_id</code>.
     */
    public void setUserId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_permission.user_id</code>.
     */
    public String getUserId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.user_permission.permission</code>.
     */
    public void setPermission(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_permission.permission</code>.
     */
    public String getPermission() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserPermission.USER_PERMISSION.ID;
    }

    @Override
    public Field<String> field2() {
        return UserPermission.USER_PERMISSION.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return UserPermission.USER_PERMISSION.PERMISSION;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getPermission();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getPermission();
    }

    @Override
    public UserPermissionRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public UserPermissionRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserPermissionRecord value3(String value) {
        setPermission(value);
        return this;
    }

    @Override
    public UserPermissionRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserPermissionRecord
     */
    public UserPermissionRecord() {
        super(UserPermission.USER_PERMISSION);
    }

    /**
     * Create a detached, initialised UserPermissionRecord
     */
    public UserPermissionRecord(String id, String userId, String permission) {
        super(UserPermission.USER_PERMISSION);

        setId(id);
        setUserId(userId);
        setPermission(permission);
        resetChangedOnNotNull();
    }
}
