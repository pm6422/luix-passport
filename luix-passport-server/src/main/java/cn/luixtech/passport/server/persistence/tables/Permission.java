/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.PermissionRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Permission extends TableImpl<PermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.permission</code>
     */
    public static final Permission PERMISSION = new Permission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionRecord> getRecordType() {
        return PermissionRecord.class;
    }

    /**
     * The column <code>public.permission.id</code>.
     */
    public final TableField<PermissionRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.permission.description</code>.
     */
    public final TableField<PermissionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.permission.resource_type</code>.
     */
    public final TableField<PermissionRecord, String> RESOURCE_TYPE = createField(DSL.name("resource_type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.permission.action</code>.
     */
    public final TableField<PermissionRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.permission.created_at</code>.
     */
    public final TableField<PermissionRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.permission.modified_at</code>.
     */
    public final TableField<PermissionRecord, Instant> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.INSTANT, this, "");

    private Permission(Name alias, Table<PermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Permission(Name alias, Table<PermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.permission</code> table reference
     */
    public Permission(String alias) {
        this(DSL.name(alias), PERMISSION);
    }

    /**
     * Create an aliased <code>public.permission</code> table reference
     */
    public Permission(Name alias) {
        this(alias, PERMISSION);
    }

    /**
     * Create a <code>public.permission</code> table reference
     */
    public Permission() {
        this(DSL.name("permission"), null);
    }

    public <O extends Record> Permission(Table<O> child, ForeignKey<O, PermissionRecord> key) {
        super(child, key, PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PermissionRecord> getPrimaryKey() {
        return Keys.PERMISSION_PKEY;
    }

    @Override
    public Permission as(String alias) {
        return new Permission(DSL.name(alias), this);
    }

    @Override
    public Permission as(Name alias) {
        return new Permission(alias, this);
    }

    @Override
    public Permission as(Table<?> alias) {
        return new Permission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(String name) {
        return new Permission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(Name name) {
        return new Permission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(Table<?> name) {
        return new Permission(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, Instant, Instant> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
