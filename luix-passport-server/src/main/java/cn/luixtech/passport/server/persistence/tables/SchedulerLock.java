/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.SchedulerLockRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SchedulerLock extends TableImpl<SchedulerLockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.scheduler_lock</code>
     */
    public static final SchedulerLock SCHEDULER_LOCK = new SchedulerLock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchedulerLockRecord> getRecordType() {
        return SchedulerLockRecord.class;
    }

    /**
     * The column <code>public.scheduler_lock.id</code>.
     */
    public final TableField<SchedulerLockRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.scheduler_lock.lock_until</code>.
     */
    public final TableField<SchedulerLockRecord, Instant> LOCK_UNTIL = createField(DSL.name("lock_until"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.scheduler_lock.locked_at</code>.
     */
    public final TableField<SchedulerLockRecord, Instant> LOCKED_AT = createField(DSL.name("locked_at"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.scheduler_lock.locked_by</code>.
     */
    public final TableField<SchedulerLockRecord, String> LOCKED_BY = createField(DSL.name("locked_by"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private SchedulerLock(Name alias, Table<SchedulerLockRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchedulerLock(Name alias, Table<SchedulerLockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.scheduler_lock</code> table reference
     */
    public SchedulerLock(String alias) {
        this(DSL.name(alias), SCHEDULER_LOCK);
    }

    /**
     * Create an aliased <code>public.scheduler_lock</code> table reference
     */
    public SchedulerLock(Name alias) {
        this(alias, SCHEDULER_LOCK);
    }

    /**
     * Create a <code>public.scheduler_lock</code> table reference
     */
    public SchedulerLock() {
        this(DSL.name("scheduler_lock"), null);
    }

    public <O extends Record> SchedulerLock(Table<O> child, ForeignKey<O, SchedulerLockRecord> key) {
        super(child, key, SCHEDULER_LOCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SchedulerLockRecord> getPrimaryKey() {
        return Keys.SCHEDULER_LOCK_PKEY;
    }

    @Override
    public SchedulerLock as(String alias) {
        return new SchedulerLock(DSL.name(alias), this);
    }

    @Override
    public SchedulerLock as(Name alias) {
        return new SchedulerLock(alias, this);
    }

    @Override
    public SchedulerLock as(Table<?> alias) {
        return new SchedulerLock(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchedulerLock rename(String name) {
        return new SchedulerLock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchedulerLock rename(Name name) {
        return new SchedulerLock(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchedulerLock rename(Table<?> name) {
        return new SchedulerLock(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Instant, Instant, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super Instant, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super Instant, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
