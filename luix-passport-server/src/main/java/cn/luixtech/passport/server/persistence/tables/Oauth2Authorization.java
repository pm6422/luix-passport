/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.Oauth2AuthorizationRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Oauth2Authorization extends TableImpl<Oauth2AuthorizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.oauth2_authorization</code>
     */
    public static final Oauth2Authorization OAUTH2_AUTHORIZATION = new Oauth2Authorization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Oauth2AuthorizationRecord> getRecordType() {
        return Oauth2AuthorizationRecord.class;
    }

    /**
     * The column <code>public.oauth2_authorization.id</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.oauth2_authorization.registered_client_id</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> REGISTERED_CLIENT_ID = createField(DSL.name("registered_client_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.oauth2_authorization.principal_name</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> PRINCIPAL_NAME = createField(DSL.name("principal_name"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.authorization_grant_type</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> AUTHORIZATION_GRANT_TYPE = createField(DSL.name("authorization_grant_type"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.oauth2_authorization.authorized_scopes</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> AUTHORIZED_SCOPES = createField(DSL.name("authorized_scopes"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.oauth2_authorization.attributes</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> ATTRIBUTES = createField(DSL.name("attributes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.state</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.authorization_code_value</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> AUTHORIZATION_CODE_VALUE = createField(DSL.name("authorization_code_value"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.authorization_code_issued_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> AUTHORIZATION_CODE_ISSUED_AT = createField(DSL.name("authorization_code_issued_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.authorization_code_expires_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> AUTHORIZATION_CODE_EXPIRES_AT = createField(DSL.name("authorization_code_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.authorization_code_metadata</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> AUTHORIZATION_CODE_METADATA = createField(DSL.name("authorization_code_metadata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.access_token_value</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> ACCESS_TOKEN_VALUE = createField(DSL.name("access_token_value"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.access_token_issued_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> ACCESS_TOKEN_ISSUED_AT = createField(DSL.name("access_token_issued_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.access_token_expires_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> ACCESS_TOKEN_EXPIRES_AT = createField(DSL.name("access_token_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.access_token_metadata</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> ACCESS_TOKEN_METADATA = createField(DSL.name("access_token_metadata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.access_token_type</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> ACCESS_TOKEN_TYPE = createField(DSL.name("access_token_type"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.oauth2_authorization.access_token_scopes</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> ACCESS_TOKEN_SCOPES = createField(DSL.name("access_token_scopes"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.oauth2_authorization.oidc_id_token_value</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> OIDC_ID_TOKEN_VALUE = createField(DSL.name("oidc_id_token_value"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.oidc_id_token_issued_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> OIDC_ID_TOKEN_ISSUED_AT = createField(DSL.name("oidc_id_token_issued_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.oidc_id_token_expires_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> OIDC_ID_TOKEN_EXPIRES_AT = createField(DSL.name("oidc_id_token_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.oidc_id_token_metadata</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> OIDC_ID_TOKEN_METADATA = createField(DSL.name("oidc_id_token_metadata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.refresh_token_value</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> REFRESH_TOKEN_VALUE = createField(DSL.name("refresh_token_value"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.refresh_token_issued_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> REFRESH_TOKEN_ISSUED_AT = createField(DSL.name("refresh_token_issued_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.refresh_token_expires_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> REFRESH_TOKEN_EXPIRES_AT = createField(DSL.name("refresh_token_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.refresh_token_metadata</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> REFRESH_TOKEN_METADATA = createField(DSL.name("refresh_token_metadata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.user_code_value</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> USER_CODE_VALUE = createField(DSL.name("user_code_value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.user_code_issued_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> USER_CODE_ISSUED_AT = createField(DSL.name("user_code_issued_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.oauth2_authorization.user_code_expires_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> USER_CODE_EXPIRES_AT = createField(DSL.name("user_code_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.oauth2_authorization.user_code_metadata</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> USER_CODE_METADATA = createField(DSL.name("user_code_metadata"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.oauth2_authorization.device_code_value</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> DEVICE_CODE_VALUE = createField(DSL.name("device_code_value"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.device_code_issued_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> DEVICE_CODE_ISSUED_AT = createField(DSL.name("device_code_issued_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.oauth2_authorization.device_code_expires_at</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, LocalDateTime> DEVICE_CODE_EXPIRES_AT = createField(DSL.name("device_code_expires_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.oauth2_authorization.device_code_metadata</code>.
     */
    public final TableField<Oauth2AuthorizationRecord, String> DEVICE_CODE_METADATA = createField(DSL.name("device_code_metadata"), SQLDataType.CLOB, this, "");

    private Oauth2Authorization(Name alias, Table<Oauth2AuthorizationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Oauth2Authorization(Name alias, Table<Oauth2AuthorizationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.oauth2_authorization</code> table
     * reference
     */
    public Oauth2Authorization(String alias) {
        this(DSL.name(alias), OAUTH2_AUTHORIZATION);
    }

    /**
     * Create an aliased <code>public.oauth2_authorization</code> table
     * reference
     */
    public Oauth2Authorization(Name alias) {
        this(alias, OAUTH2_AUTHORIZATION);
    }

    /**
     * Create a <code>public.oauth2_authorization</code> table reference
     */
    public Oauth2Authorization() {
        this(DSL.name("oauth2_authorization"), null);
    }

    public <O extends Record> Oauth2Authorization(Table<O> child, ForeignKey<O, Oauth2AuthorizationRecord> key) {
        super(child, key, OAUTH2_AUTHORIZATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Oauth2AuthorizationRecord> getPrimaryKey() {
        return Keys.OAUTH2_AUTHORIZATION_PKEY;
    }

    @Override
    public Oauth2Authorization as(String alias) {
        return new Oauth2Authorization(DSL.name(alias), this);
    }

    @Override
    public Oauth2Authorization as(Name alias) {
        return new Oauth2Authorization(alias, this);
    }

    @Override
    public Oauth2Authorization as(Table<?> alias) {
        return new Oauth2Authorization(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2Authorization rename(String name) {
        return new Oauth2Authorization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2Authorization rename(Name name) {
        return new Oauth2Authorization(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth2Authorization rename(Table<?> name) {
        return new Oauth2Authorization(name.getQualifiedName(), null);
    }
}
