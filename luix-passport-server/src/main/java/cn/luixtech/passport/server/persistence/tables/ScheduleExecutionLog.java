/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.ScheduleExecutionLogRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ScheduleExecutionLog extends TableImpl<ScheduleExecutionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.schedule_execution_log</code>
     */
    public static final ScheduleExecutionLog SCHEDULE_EXECUTION_LOG = new ScheduleExecutionLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScheduleExecutionLogRecord> getRecordType() {
        return ScheduleExecutionLogRecord.class;
    }

    /**
     * The column <code>public.schedule_execution_log.id</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.schedule_execution_log.schedule_name</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, String> SCHEDULE_NAME = createField(DSL.name("schedule_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.schedule_execution_log.start_at</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, Instant> START_AT = createField(DSL.name("start_at"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.schedule_execution_log.end_at</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, Instant> END_AT = createField(DSL.name("end_at"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.schedule_execution_log.duration_ms</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, Long> DURATION_MS = createField(DSL.name("duration_ms"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.schedule_execution_log.status</code>.
     * (RUNNING/SUCCESS/FAILURE)
     */
    public final TableField<ScheduleExecutionLogRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "(RUNNING/SUCCESS/FAILURE)");

    /**
     * The column <code>public.schedule_execution_log.node</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, String> NODE = createField(DSL.name("node"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>public.schedule_execution_log.parameters</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, String> PARAMETERS = createField(DSL.name("parameters"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.schedule_execution_log.error</code>.
     */
    public final TableField<ScheduleExecutionLogRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    private ScheduleExecutionLog(Name alias, Table<ScheduleExecutionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScheduleExecutionLog(Name alias, Table<ScheduleExecutionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.schedule_execution_log</code> table
     * reference
     */
    public ScheduleExecutionLog(String alias) {
        this(DSL.name(alias), SCHEDULE_EXECUTION_LOG);
    }

    /**
     * Create an aliased <code>public.schedule_execution_log</code> table
     * reference
     */
    public ScheduleExecutionLog(Name alias) {
        this(alias, SCHEDULE_EXECUTION_LOG);
    }

    /**
     * Create a <code>public.schedule_execution_log</code> table reference
     */
    public ScheduleExecutionLog() {
        this(DSL.name("schedule_execution_log"), null);
    }

    public <O extends Record> ScheduleExecutionLog(Table<O> child, ForeignKey<O, ScheduleExecutionLogRecord> key) {
        super(child, key, SCHEDULE_EXECUTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ScheduleExecutionLogRecord> getPrimaryKey() {
        return Keys.SCHEDULE_EXECUTION_LOG_PKEY;
    }

    @Override
    public ScheduleExecutionLog as(String alias) {
        return new ScheduleExecutionLog(DSL.name(alias), this);
    }

    @Override
    public ScheduleExecutionLog as(Name alias) {
        return new ScheduleExecutionLog(alias, this);
    }

    @Override
    public ScheduleExecutionLog as(Table<?> alias) {
        return new ScheduleExecutionLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduleExecutionLog rename(String name) {
        return new ScheduleExecutionLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduleExecutionLog rename(Name name) {
        return new ScheduleExecutionLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduleExecutionLog rename(Table<?> name) {
        return new ScheduleExecutionLog(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, Instant, Instant, Long, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super Instant, ? super Instant, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super Instant, ? super Instant, ? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
