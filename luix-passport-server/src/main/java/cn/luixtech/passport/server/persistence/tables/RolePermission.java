/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables;


import cn.luixtech.passport.server.persistence.Indexes;
import cn.luixtech.passport.server.persistence.Keys;
import cn.luixtech.passport.server.persistence.Public;
import cn.luixtech.passport.server.persistence.tables.records.RolePermissionRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RolePermission extends TableImpl<RolePermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.role_permission</code>
     */
    public static final RolePermission ROLE_PERMISSION = new RolePermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolePermissionRecord> getRecordType() {
        return RolePermissionRecord.class;
    }

    /**
     * The column <code>public.role_permission.id</code>.
     */
    public final TableField<RolePermissionRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.role_permission.role_id</code>.
     */
    public final TableField<RolePermissionRecord, String> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.role_permission.permission_id</code>.
     */
    public final TableField<RolePermissionRecord, String> PERMISSION_ID = createField(DSL.name("permission_id"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.role_permission.created_at</code>.
     */
    public final TableField<RolePermissionRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.role_permission.created_by</code>.
     */
    public final TableField<RolePermissionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.role_permission.modified_at</code>.
     */
    public final TableField<RolePermissionRecord, Instant> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.role_permission.modified_by</code>.
     */
    public final TableField<RolePermissionRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(50), this, "");

    private RolePermission(Name alias, Table<RolePermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolePermission(Name alias, Table<RolePermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.role_permission</code> table reference
     */
    public RolePermission(String alias) {
        this(DSL.name(alias), ROLE_PERMISSION);
    }

    /**
     * Create an aliased <code>public.role_permission</code> table reference
     */
    public RolePermission(Name alias) {
        this(alias, ROLE_PERMISSION);
    }

    /**
     * Create a <code>public.role_permission</code> table reference
     */
    public RolePermission() {
        this(DSL.name("role_permission"), null);
    }

    public <O extends Record> RolePermission(Table<O> child, ForeignKey<O, RolePermissionRecord> key) {
        super(child, key, ROLE_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ROLE_PERMISSION_PERMISSION_ID, Indexes.IDX_ROLE_PERMISSION_ROLE_ID);
    }

    @Override
    public UniqueKey<RolePermissionRecord> getPrimaryKey() {
        return Keys.ROLE_PERMISSION_PKEY;
    }

    @Override
    public List<UniqueKey<RolePermissionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_ROLE_PERMISSION);
    }

    @Override
    public List<ForeignKey<RolePermissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROLE_PERMISSION__FK_ROLE_PERMISSION_ROLE_ID, Keys.ROLE_PERMISSION__FK_ROLE_PERMISSION_PERMISSION_ID);
    }

    private transient Role _role;
    private transient Permission _permission;

    /**
     * Get the implicit join path to the <code>public.role</code> table.
     */
    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.ROLE_PERMISSION__FK_ROLE_PERMISSION_ROLE_ID);

        return _role;
    }

    /**
     * Get the implicit join path to the <code>public.permission</code> table.
     */
    public Permission permission() {
        if (_permission == null)
            _permission = new Permission(this, Keys.ROLE_PERMISSION__FK_ROLE_PERMISSION_PERMISSION_ID);

        return _permission;
    }

    @Override
    public RolePermission as(String alias) {
        return new RolePermission(DSL.name(alias), this);
    }

    @Override
    public RolePermission as(Name alias) {
        return new RolePermission(alias, this);
    }

    @Override
    public RolePermission as(Table<?> alias) {
        return new RolePermission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermission rename(String name) {
        return new RolePermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermission rename(Name name) {
        return new RolePermission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermission rename(Table<?> name) {
        return new RolePermission(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Instant, String, Instant, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super Instant, ? super String, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super Instant, ? super String, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
