/*
 * This file is generated by jOOQ.
 */
package cn.luixtech.passport.server.persistence.tables.records;


import cn.luixtech.passport.server.persistence.tables.SchedulerLock;

import java.time.Instant;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SchedulerLockRecord extends UpdatableRecordImpl<SchedulerLockRecord> implements Record4<String, Instant, Instant, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.scheduler_lock.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.scheduler_lock.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.scheduler_lock.lock_until</code>.
     */
    public void setLockUntil(Instant value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.scheduler_lock.lock_until</code>.
     */
    public Instant getLockUntil() {
        return (Instant) get(1);
    }

    /**
     * Setter for <code>public.scheduler_lock.locked_at</code>.
     */
    public void setLockedAt(Instant value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.scheduler_lock.locked_at</code>.
     */
    public Instant getLockedAt() {
        return (Instant) get(2);
    }

    /**
     * Setter for <code>public.scheduler_lock.locked_by</code>.
     */
    public void setLockedBy(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.scheduler_lock.locked_by</code>.
     */
    public String getLockedBy() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Instant, Instant, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, Instant, Instant, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SchedulerLock.SCHEDULER_LOCK.ID;
    }

    @Override
    public Field<Instant> field2() {
        return SchedulerLock.SCHEDULER_LOCK.LOCK_UNTIL;
    }

    @Override
    public Field<Instant> field3() {
        return SchedulerLock.SCHEDULER_LOCK.LOCKED_AT;
    }

    @Override
    public Field<String> field4() {
        return SchedulerLock.SCHEDULER_LOCK.LOCKED_BY;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public Instant component2() {
        return getLockUntil();
    }

    @Override
    public Instant component3() {
        return getLockedAt();
    }

    @Override
    public String component4() {
        return getLockedBy();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public Instant value2() {
        return getLockUntil();
    }

    @Override
    public Instant value3() {
        return getLockedAt();
    }

    @Override
    public String value4() {
        return getLockedBy();
    }

    @Override
    public SchedulerLockRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public SchedulerLockRecord value2(Instant value) {
        setLockUntil(value);
        return this;
    }

    @Override
    public SchedulerLockRecord value3(Instant value) {
        setLockedAt(value);
        return this;
    }

    @Override
    public SchedulerLockRecord value4(String value) {
        setLockedBy(value);
        return this;
    }

    @Override
    public SchedulerLockRecord values(String value1, Instant value2, Instant value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchedulerLockRecord
     */
    public SchedulerLockRecord() {
        super(SchedulerLock.SCHEDULER_LOCK);
    }

    /**
     * Create a detached, initialised SchedulerLockRecord
     */
    public SchedulerLockRecord(String id, Instant lockUntil, Instant lockedAt, String lockedBy) {
        super(SchedulerLock.SCHEDULER_LOCK);

        setId(id);
        setLockUntil(lockUntil);
        setLockedAt(lockedAt);
        setLockedBy(lockedBy);
        resetChangedOnNotNull();
    }
}
