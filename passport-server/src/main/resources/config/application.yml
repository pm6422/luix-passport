# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use,
# for example application-dev.yml if you use the "dev" profile.
# Full reference is available at:
# https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/appendix-application-properties.html
# ===================================================================
management: # Management http server configuration, used by ManagementServerProperties
    endpoints:
        web:
            base-path: /management
            exposure: # Refer to https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/html/production-ready-features.html
                include: ['configprops', 'env', 'health', 'info', 'beans', 'mappings', 'httptrace', 'shutdown', 'auditevents', 'scheduledtasks', 'loggers', 'prometheus', 'threaddump']
    endpoint:
        health: # used by HealthEndpointProperties, Note: it will show health details if it has the access token by Ajax
            enabled: true
            show-details: WHEN_AUTHORIZED
        httptrace:
            enabled: true
        shutdown:
            enabled: true # explicitly enable
    health:
        mail:
            enabled: true
        mongo:
            enabled: true
    metrics:
        export:
            # Prometheus is the default metrics backend
            prometheus:
                enabled: true
                step: 60
        enable:
            http: true
            jvm: true
            logback: true
            process: true
            system: true
        distribution:
            percentiles-histogram:
                all: true
            percentiles:
                all: 0, 0.5, 0.75, 0.95, 0.99, 1.0
        tags:
            application: ${spring.application.name}
        web:
            server:
                request:
                    autotime:
                        enabled: true
info: # These configuration can be exported to Environment, accessing URL /info can get these properties
    artifact:
        id: @project.artifactId@
        name: @project.name@
        version: @project.version@
    project:
        package: org.infinity.passport
spring:
    application:
        name: ${info.artifact.name}
    profiles:
        # The commented value for `active` can be replaced with valid spring profiles to load.
        # Otherwise, it will be filled in by maven when building the WAR file
        # Either way, it can be overridden by `--spring.profiles.active` value passed in the commandline or `-Dspring.profiles.active` set in `JAVA_OPTS`
        active: @spring.profiles.active@
    messages:
        basename: i18n/messages
    task:
        execution:
            thread-name-prefix: ${spring.application.name}-task-
            pool:
                core-size: 5
                max-size: 32 # 生产环境CPU是32线程
                queue-capacity: 1000
        scheduling:
            thread-name-prefix: ${spring.application.name}-scheduling-
            pool:
                size: 2
    thymeleaf: #ThymeleafAutoConfiguration
        mode: HTML
    servlet:
        multipart: # Management http multipart configuration, used by MultipartProperties
            enabled: true
            max-file-size: 30MB
            max-request-size: 30MB
    session: # used by MongoIndexedSessionRepository
        store-type: MONGODB
        mongodb:
            collection-name: HttpSession
    mail: # specific mail property, used by MailProperties
        host: smtp.exmail.qq.com
        username: admin@pm6422.org
        password: 35H-UHR-9dH-8G9-FG3
    banner:
        location: classpath:config/banner-company.txt
    data:
        mongodb:
            auto-index-creation: false
server:
    # It can be overridden by `--server.port` value passed in the commandline or `-Dserver.port` set in `JAVA_OPTS`
    port: @app.server.port@
    servlet:
        session:
            cookie:
                name: ${info.artifact.name}
            timeout: 1D # Session timeout in 1 day, Note: this parameter can control the login expiration
            # and this statement can effect spring session, used by SessionProperties
logging:
    config: classpath:config/logback-spring.xml
    file:
        path: ${user.home}${file.separator}Log${file.separator}${info.artifact.id}${file.separator}${info.artifact.id}
    level:
        root: DEBUG
        ${info.project.package}: DEBUG
# ===================================================================
# Application specific properties
# ===================================================================
application:
    http:
        cache: # Used by the CachingHttpHeadersFilter
            time-to-live-in-days: 31
    swagger:
        enabled: true
        api:
            title: Passport Server API
            description: Passport Server 接口文档
        open-api:
            title: Passport Server Open API
            description: Passport Server 开放接口文档
        version: @project.version@
        contact-name: Louis
        contact-email: pm6422@126.com
        host:
    aop-logging:
        enabled: true
    elapsed-time-logging:
        enabled: true
        slow-execution-threshold: 300 # unit: ms
    ribbon:
        # comma separated list of profiles to show a ribbon on the GUI
        display-on-active-profiles: dev,test,demo,preprod
    user-audit-event:
        enabled: true
    http-client-connection:
        global-retry-count: 1
        global-read-timeout-in-seconds: 3
    cache: # Cache configuration
        cache-prefix: ${spring.application.name}_
